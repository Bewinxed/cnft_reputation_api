from enum import Enum


class TransactionSource(str, Enum):
    """
    TransactionSource
    """

    """
    allowed enum values
    """
    FORM_FUNCTION = 'FORM_FUNCTION'
    EXCHANGE_ART = 'EXCHANGE_ART'
    CANDY_MACHINE_V2 = 'CANDY_MACHINE_V2'
    CANDY_MACHINE_V1 = 'CANDY_MACHINE_V1'
    UNKNOWN = 'UNKNOWN'
    SOLANART = 'SOLANART'
    SOLSEA = 'SOLSEA'
    MAGIC_EDEN = 'MAGIC_EDEN'
    HOLAPLEX = 'HOLAPLEX'
    METAPLEX = 'METAPLEX'
    OPENSEA = 'OPENSEA'
    SOLANA_PROGRAM_LIBRARY = 'SOLANA_PROGRAM_LIBRARY'
    ANCHOR = 'ANCHOR'
    W_SOL = 'W_SOL'
    PHANTOM = 'PHANTOM'
    SYSTEM_PROGRAM = 'SYSTEM_PROGRAM'
    STAKE_PROGRAM = 'STAKE_PROGRAM'
    COINBASE = 'COINBASE'
    CORAL_CUBE = 'CORAL_CUBE'
    HEDGE = 'HEDGE'
    LAUNCH_MY_NFT = 'LAUNCH_MY_NFT'
    GEM_BANK = 'GEM_BANK'
    GEM_FARM = 'GEM_FARM'
    DEGODS = 'DEGODS'
    BLOCKSMITH_LABS = 'BLOCKSMITH_LABS'
    YAWWW = 'YAWWW'
    ATADIA = 'ATADIA'
    SOLPORT = 'SOLPORT'
    HYPERSPACE = 'HYPERSPACE'
    DIGITAL_EYES = 'DIGITAL_EYES'
    ELIXIR = 'ELIXIR'
    ELIXIR_LAUNCHPAD = 'ELIXIR_LAUNCHPAD'
    TENSOR = 'TENSOR'
    BIFROST = 'BIFROST'
    JUPITER = 'JUPITER'
    MERCURIAL_STABLE_SWAP = 'MERCURIAL_STABLE_SWAP'
    SABER = 'SABER'
    SERUM = 'SERUM'
    STEP_FINANCE = 'STEP_FINANCE'
    CROPPER = 'CROPPER'
    RAYDIUM = 'RAYDIUM'
    ALDRIN = 'ALDRIN'
    CREMA = 'CREMA'
    LIFINITY = 'LIFINITY'
    CYKURA = 'CYKURA'
    ORCA = 'ORCA'
    MARINADE = 'MARINADE'
    STEPN = 'STEPN'
    SENCHA_EXCHANGE = 'SENCHA EXCHANGE'
    SAROS = 'SAROS'
    ENGLISH_AUCTION_AUCTION = 'ENGLISH_AUCTION_AUCTION'
    FOXY = 'FOXY'
    FOXY_STAKING = 'FOXY_STAKING'
    FOXY_RAFFLE = 'FOXY_RAFFLE'
    FOXY_TOKEN_MARKET = 'FOXY_TOKEN_MARKET'
    FOXY_COINFLIP = 'FOXY_COINFLIP'
    ZETA = 'ZETA'
    HADESWAP = 'HADESWAP'
    CARDINAL_RENT = 'CARDINAL_RENT'
    CARDINAL_STAKING = 'CARDINAL_STAKING'
    BPF_UPGRADEABLE_LOADER = 'BPF_UPGRADEABLE_LOADER'
    BPF_LOADER = 'BPF_LOADER'
    SQUADS = 'SQUADS'
    OPEN_CREATOR_PROTOCOL = 'OPEN_CREATOR_PROTOCOL'
    
    @classmethod
    def _missing_(cls, number):
        return cls(cls.UNKNOWN)